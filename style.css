// Configurações iniciais
let bpm = 120; // batidas por minuto padrão
let duration = 60000 / bpm; // duração da batida em ms

// Seleção dos elementos DOM
const bolinha = document.getElementById("bolinha");
const zona = document.getElementById("zona-perfect");
const barra = document.getElementById("barra");
const feedback = document.getElementById("feedback");
const botaoEspaco = document.getElementById("botaoEspaco");
const bpmInput = document.getElementById("bpmInput");
const bpmDisplay = document.getElementById("bpmDisplay");
const startBtn = document.getElementById("startBtn");

// Tamanhos fixos para cálculos
const barraWidth = 400;
const bolinhaWidth = 30;

let animationFrameId;
let intervalId;

let perfectStreak = 0; // contador de perfects seguidos
let roundActive = false; // começa desativado até clicar "Começar"

// Criação de sintetizadores para cada tipo de som (Tone.js)
const synthPerfect = new Tone.MembraneSynth().toDestination();
const synthGreat = new Tone.MembraneSynth().toDestination();
const synthCool = new Tone.MembraneSynth().toDestination();
const synthBad = new Tone.MembraneSynth().toDestination();
const synthMiss = new Tone.MembraneSynth().toDestination();

// Atualiza duração com base no BPM e exibe na tela
function updateDuration() {
  bpm = parseInt(bpmInput.value) || 120;
  duration = 60000 / bpm;
  bpmDisplay.textContent = `BPM: ${bpm}`;
}

// Função que anima a bolinha da esquerda para a direita
function animateBolinha() {
  const start = performance.now();

  function frame(now) {
    let elapsed = now - start;
    let percent = elapsed / duration;
    if (percent > 1) percent = 1;

    // Calcula posição atual da bolinha (em px)
    const x = percent * (barraWidth - bolinhaWidth);
    bolinha.style.left = `${x}px`;

    if (percent < 1) {
      animationFrameId = requestAnimationFrame(frame);
    }
  }

  animationFrameId = requestAnimationFrame(frame);
}

// Função que inicia uma rodada (movimento da bolinha)
function startRound() {
  roundActive = true;
  updateDuration();

  animateBolinha();

  // Quando a rodada acabar, ativa a pausa (opacidade 0.7)
  intervalId = setTimeout(() => {
    roundActive = false;
    barra.style.opacity = "0.7";
    bolinha.style.opacity = "0.7";
    zona.style.opacity = "0.7";

    // Depois de 1s de pausa, retorna à opacidade normal e inicia nova rodada
    setTimeout(() => {
      barra.style.opacity = "1";
      bolinha.style.opacity = "1";
      zona.style.opacity = "1";

      startRound();
    }, 1000);
  }, duration);
}

// Mostra feedback colorido com fade out
function showFeedback(text, classe) {
  feedback.textContent = text;
  feedback.className = classe;
  feedback.style.opacity = "1";

  setTimeout(() => {
    feedback.style.opacity = "0";
  }, 800);
}

// Toca som conforme resultado
function playSound(result) {
  switch (result) {
    case "PERFECT": synthPerfect.triggerAttackRelease("C2", "8n"); break;
    case "GREAT": synthGreat.triggerAttackRelease("E2", "8n"); break;
    case "COOL": synthCool.triggerAttackRelease("G2", "8n"); break;
    case "BAD": synthBad.triggerAttackRelease("A1", "8n"); break;
    case "MISS": synthMiss.triggerAttackRelease("C1", "8n"); break;
  }
}

// Checa o acerto ao apertar espaço ou clicar botão
function checkHit() {
  if (!roundActive) return; // ignora durante pausa

  // Centro da bolinha e da zona "perfect"
  const bolinhaCenter = bolinha.offsetLeft + bolinhaWidth / 2;
  const zonaCenter = zona.offsetLeft + zona.offsetWidth / 2;

  const diff = Math.abs(bolinhaCenter - zonaCenter);

  let result = "";
  if (diff < 15) result = "PERFECT";
  else if (diff < 35) result = "GREAT";
  else if (diff < 55) result = "COOL";
  else if (diff < 80) result = "BAD";
  else result = "MISS";

  // Atualiza contador de perfect seguidos
  if (result === "PERFECT") perfectStreak++;
  else perfectStreak = 0;

  // Exibe mensagem com contador se tiver streak
  if (result === "PERFECT" && perfectStreak > 1) {
    showFeedback(`Perfect x${perfectStreak}`, "perfect");
  } else {
    showFeedback(result.charAt(0) + result.slice(1).toLowerCase(), result.toLowerCase());
  }

  playSound(result);
}

// Eventos para apertar espaço ou clicar no botão
document.addEventListener("keydown", (e) => {
  if (e.code === "Space") {
    e.preventDefault();
    checkHit();
  }
});

botaoEspaco.addEventListener("click", () => {
  checkHit();
});

// Atualiza duração ao mudar BPM no input
bpmInput.addEventListener("input", () => {
  updateDuration();
});

// Não inicia automático! Aguarda clique no botão "Começar"
